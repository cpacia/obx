// Code generated by go-bindata.
// sources:
// sample-obxd.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObxdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x95\x51\x6f\xdb\x36\x10\xc7\xdf\xf5\x29\xee\x21\x05\x36\xc0\xb5\xe2\x34\x5b\x91\x68\x1e\xe0\x26\x59\x91\xce\xab\x85\xd8\x49\xb3\xbc\xd1\xe4\x49\xe2\x4c\xf3\x34\x92\xb2\xad\x0d\xcb\x67\x1f\x8e\x92\x13\x67\x6d\x80\xc1\x2f\x36\xef\xcf\xff\x1d\x7f\x47\x9e\x33\x58\x54\x08\x4a\x3b\x94\x81\x5c\x0b\x81\xc0\x07\x72\x08\x4a\x04\x01\xbe\x91\x15\x08\x0f\xa1\x42\xa0\xe5\x2e\x2e\x2e\x85\xc7\x61\xd2\xef\xc3\x42\x34\x26\x80\xf6\xf0\x98\x0e\x59\x41\x16\xf2\xd9\xfc\xfa\x1e\x66\x73\xf4\x03\x38\x9a\xce\x2e\x26\xd3\x49\x9e\x5f\x4e\x16\x93\xb4\x17\x7c\xd1\x56\xd1\xd6\x0f\x92\x0c\x1e\xd3\xa9\x5e\x3a\xe1\xda\x74\x52\xd7\x46\x4b\x11\x34\x59\x98\x37\x75\x4d\x2e\xec\xf5\xbf\x09\x09\xb3\xf9\x00\x84\x55\x70\x54\xd1\x1a\xfb\x40\x92\x41\x6e\x84\x3d\x1b\x02\x5c\xd9\x8d\x76\x64\xd7\x68\x03\x6c\x84\xd3\x62\x69\xd0\x83\x70\x08\xb8\xab\x85\x55\xa8\xc0\x13\x1f\xa3\x85\xb5\x68\x61\x89\xd0\x78\x54\x43\x80\xcf\xb3\xc5\xd5\xf9\xbe\xa2\x24\x03\x7c\xd5\x28\xb4\xb5\x96\xc2\x98\x16\xde\xdc\x4d\x6e\xae\x27\x1f\xa6\x57\x6f\x06\xb0\x6c\x42\x6f\xdb\xf8\xc0\xbe\x42\x4a\xf4\x1e\x15\x6c\x75\xa8\x92\x0c\x8e\xf6\x62\xa8\xd0\xe1\x10\x60\x62\x3c\x0d\xe0\x91\x99\x3d\xd5\x16\xe8\x25\xa9\x03\x4a\x8c\x9a\xb1\x2b\xed\xc6\x1d\x63\x95\x24\x19\xdc\x7a\x84\x80\x3e\x58\x0c\xac\xe8\xbf\x8e\x47\x31\x66\xf5\x06\x9d\x17\x06\x72\xd3\x94\x11\x5b\x6e\x44\x0b\xdf\xdd\xe6\x36\xff\x1e\x44\x13\x68\x2d\x42\x7f\x18\xaa\xd1\x76\x0d\x36\xda\x07\xb4\xc0\xe4\x81\x96\x41\x68\xcb\x40\x38\x82\xbb\x80\xce\x0a\x03\xd7\x39\x08\xa5\x1c\x7a\x0f\x85\xa3\x35\xf8\xae\x51\xa8\x40\xe1\x46\x4b\xf4\x43\x58\x54\xda\x03\xd5\xb1\x8f\x4a\xfb\x8e\x9f\x8e\x45\x5a\x6a\x6a\x5b\x77\x35\xce\x11\xd5\xde\xab\x07\xcc\x1d\x61\x12\x7f\x90\xb6\x31\xad\xc5\xb0\x25\xb7\x1a\xc2\xcc\x82\x0f\xc2\x85\x6e\x95\x14\xc2\x56\x1b\x03\x6b\xb1\xc2\x24\x03\x6a\x42\x49\xda\x96\x20\xc9\x5a\x94\x9c\xd9\xb3\x0f\x8b\x97\x44\xc1\x07\x27\x6a\xa8\x11\x9d\x8f\x2c\x1a\x46\x57\xe1\x9a\x35\x4a\x7b\x49\x1b\x74\x40\xa1\x42\x97\x64\xbd\xec\x3f\x05\x24\x19\x78\x44\xc5\xe5\x8e\x53\x5d\x9f\xa6\xbb\x61\xfc\xa4\x41\xd6\xe9\xe9\xf1\xf1\x28\xad\x4f\xea\x74\x74\x72\xf9\xee\x57\xa2\x2f\xf9\xc3\xbb\xdd\x87\xcf\x37\x1f\x77\xa7\x45\x75\xb3\x2c\x7e\x9f\xc8\xfb\xdb\x4a\x3e\x54\x8b\x87\x93\xe9\xc5\xea\xd3\xfb\xd3\xd5\xa7\xfb\x8f\xc5\x5f\x67\x8b\xbb\xe9\x82\x51\x4c\x3b\xee\x2f\x61\x70\xfa\x83\x15\xab\xa0\x76\x14\x48\x92\xf1\x4f\xa0\xfa\x86\x15\xe4\x40\x5b\x49\x6b\x6d\x4b\xa6\xdc\x15\x7d\x48\x83\x0f\xd0\x89\x9f\x8f\x70\x3c\x8c\x9f\x78\x84\xb3\xe3\xe3\xd1\x57\x92\x1f\xd3\xf3\xf3\xd7\xa3\xcf\x06\x8d\xea\x24\xe9\x9f\x8d\x96\xdf\x76\x79\x29\x49\x32\xb8\xc4\x65\x53\x82\xa1\xb2\xe4\xbe\x19\xdc\xa0\xe1\x1a\xef\x84\xd1\xaa\xfb\xd9\x51\xf8\x5b\xb1\x70\x00\xda\x16\x34\x00\x4b\x41\x4b\x1c\xc0\x56\x38\xab\x6d\x39\x00\x74\x8e\xdc\x00\xa4\xd3\xf1\x36\xff\xc3\xd9\xa9\x8c\xfb\xc7\xbc\x25\x49\x5e\x1d\x6f\x86\x4a\x28\xb4\x41\xdf\xed\x39\x78\x5d\xa9\xa1\xd2\xc7\x2b\x5a\xa3\xd4\x45\x1b\x5b\x51\xde\xe4\x17\xa0\x6d\x40\x57\x08\x89\x5d\x3f\xf8\x9d\x3c\x77\x81\x2c\xe8\x02\x5a\x6a\x60\x2b\x6c\x0c\xf4\xf7\xac\xdb\x3b\xc9\xaf\xf9\x84\xa5\xab\x65\xb7\x61\xdc\xf3\x3b\xff\x81\xf1\x26\x19\x4c\x2c\xbf\xcc\x0a\x6d\xd8\x8f\xc1\x40\xab\xbe\xbd\x87\x36\x6c\x7d\x20\x44\x90\x46\xa3\x0d\x7e\x6f\xcf\xb1\xb8\x73\xfc\x13\xf1\xf7\x93\xb7\xf1\xd7\xcf\x9c\xe3\x17\x6d\x90\x2f\x06\x3f\x6e\x26\xcf\xbe\x12\x5d\xd0\x45\x67\xc5\x44\x92\x0c\x5c\x2d\x79\xb5\x23\x22\x9d\xd8\x1a\x74\xa9\xab\xe5\x90\x57\xff\x8f\xcf\x0a\xdb\xce\x66\x85\xed\xd7\x2e\x1c\x8d\x9d\x79\x9e\x14\xbe\xa2\xc6\xa8\xfd\x5c\x8e\x6d\x3a\xa0\xff\xad\xf9\xa3\x0b\x68\xfc\x3e\x37\x8f\xb4\xb7\x25\x5a\x74\x82\x87\xd1\x7c\x3e\x3d\x2c\x87\xc9\x5c\x17\x10\x0e\xf2\x69\xcf\xb7\xa9\x4b\xb6\xad\xd0\x3e\x9d\x80\x23\xcf\x46\x3a\x74\x93\xc6\xe8\x15\x9a\xf8\xb7\x11\x1c\xc6\x88\xe0\x21\xb1\xe1\xfb\xca\xee\xfb\x02\x75\xed\xc7\xa3\x93\xf7\xb1\xb3\xa3\x7f\x03\x00\x00\xff\xff\x90\x4b\x82\x84\x5b\x07\x00\x00")

func sampleObxdConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObxdConf,
		"sample-obxd.conf",
	)
}

func sampleObxdConf() (*asset, error) {
	bytes, err := sampleObxdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obxd.conf", size: 1883, mode: os.FileMode(436), modTime: time.Unix(1644523094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obxd.conf": sampleObxdConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obxd.conf": &bintree{sampleObxdConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
