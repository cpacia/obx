// Code generated by go-bindata.
// sources:
// sample-obx.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleObxConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xdf\x6f\xe3\x36\x0c\xc7\xdf\xfd\x57\xf0\xa1\x07\x6c\x40\x2e\x6e\x7b\x1d\x0e\x77\x5e\x06\xb8\x3f\x76\xe8\x2d\xbb\x18\x4d\xda\xeb\xfa\x26\xcb\xb4\xad\x45\x11\x05\x49\x4e\xe2\x0d\xeb\xdf\x3e\x50\x8e\xfb\x63\xdb\x01\x83\x5f\x6c\x91\xfc\x92\xfa\x90\x74\x06\xab\x16\xa1\x52\x0e\x65\x20\xd7\x43\x20\xf0\x81\x1c\x42\x25\x82\x00\xdf\xc9\x16\x84\x87\xd0\x22\x50\xb9\x8f\x87\xa5\xf0\x38\x4d\x0e\x71\x58\x8b\x4e\x07\x50\x1e\x1e\xd3\x29\x7b\x90\x81\x62\xb1\xbc\xbe\x87\xc5\x12\xfd\x04\x8e\xe6\x8b\x8b\x7c\x9e\x17\xc5\x65\xbe\xca\xd3\x83\xc3\x57\x65\x2a\xda\xf9\x49\x92\xc1\x63\x3a\x57\xa5\x13\xae\x4f\x73\x6b\xb5\x92\x22\x28\x32\xb0\xec\xac\x25\x17\x46\xff\x5f\x85\x84\xc5\x72\x02\xc2\x54\x70\xd4\xd2\x06\x0f\x86\x24\x83\x42\x0b\xf3\x61\x0a\x70\x65\xb6\xca\x91\xd9\xa0\x09\xb0\x15\x4e\x89\x52\xa3\x07\xe1\x10\x70\x6f\x85\xa9\xb0\x02\x4f\x7c\x8d\x1e\x36\xa2\x87\x12\xa1\xf3\x58\x4d\x01\xbe\x2c\x56\x57\x1f\xc7\x8a\x92\x0c\xf0\x9b\x42\xa1\xb7\x4a\x0a\xad\x7b\x78\x73\x97\xdf\x5c\xe7\xe7\xf3\xab\x37\x13\x28\xbb\x70\x90\xed\x7c\x60\x5d\x21\x25\x7a\x8f\x15\xec\x54\x68\x93\x0c\x8e\x46\x67\x68\xd1\xe1\x14\x20\xd7\x9e\x26\xf0\xc8\xcc\x9e\x6a\x0b\xf4\x9a\xd4\x0b\x4a\x8c\x9a\xb1\x57\xca\xcd\x06\xc6\x49\x92\xc1\xad\x47\x08\xe8\x83\xc1\xc0\x0e\x87\xd7\xd9\x49\xb4\x19\xb5\x45\xe7\x85\x86\x42\x77\x4d\xa4\x56\x68\xd1\xc3\x77\xb7\x85\x29\xbe\x07\xd1\x05\xda\x88\x70\xb8\x0b\x59\x34\x43\x7f\xb5\xf2\x01\x0d\x30\x78\xa0\x32\x08\x65\x98\x07\x5b\x70\x1f\xd0\x19\xa1\xe1\xba\x00\x51\x55\x0e\xbd\x87\xda\xd1\x06\xfc\xd0\x27\xac\xa0\xc2\xad\x92\xe8\xa7\xb0\x6a\x95\x07\xb2\xb1\x8d\x95\xf2\x03\x3e\x15\x8b\x34\xd4\x59\x63\x87\x1a\xcf\x89\x82\x0f\xc2\x8e\x7a\x07\xc6\xdc\x14\x86\xf1\x3b\x29\x13\x53\x1b\x0c\x3b\x72\xeb\x29\x2c\x0c\xf8\x20\x5c\x18\x4e\xa9\x42\xd8\x29\xad\x61\x23\xd6\x98\x64\x40\x5d\x68\x48\x99\x06\x24\x19\x83\x92\xb3\x7b\xd6\x61\xe7\x32\xa6\x72\xc2\x82\x45\x74\x3e\xf2\xe8\x18\x5f\x8b\x1b\xf6\xa9\x94\x97\xb4\x45\x07\x14\x5a\x74\x49\x76\x70\xfb\x47\x01\x49\xf6\x2c\xc4\x35\xcf\x52\x65\xcf\xd2\xfd\x34\x3e\x69\x90\x36\x3d\x3b\x3e\x3e\x49\xed\xa9\x4d\x4f\x4e\x2f\xdf\xfd\x42\xf4\xb5\x78\x78\xb7\x3f\xff\x72\xf3\x69\x7f\x56\xb7\x37\x65\xfd\x5b\x2e\xef\x6f\x5b\xf9\xd0\xae\x1e\x4e\xe7\x17\xeb\xcf\xef\xcf\xd6\x9f\xef\x3f\xd5\x7f\x7c\x58\xdd\xcd\x57\xcc\xe4\x12\xcb\xae\x01\x4d\x4d\xc3\x37\xd1\xb8\x45\xcd\x69\xef\x84\x56\xd5\xf0\x39\x40\xfa\xb3\x62\xc7\x09\x28\x53\xd3\x04\x0c\x05\x25\x71\x02\x3b\xe1\x8c\x32\xcd\x04\xd0\x39\x72\x13\x90\x4e\xc5\x1e\xff\x95\x64\xac\x19\xe3\x67\x1c\x92\x24\xdf\xdc\x79\x4d\x0d\xd4\x4a\xa3\x1f\x62\x9e\x46\x4e\x3a\xb1\xd3\xe8\x52\x4d\x8d\xe7\xf0\xa5\x45\xa9\xea\x3e\x02\x6a\x6e\x8a\x0b\x50\x26\xa0\xab\x85\xc4\x48\x37\x8e\x50\xa0\x71\xa2\xc8\x80\xaa\xa1\xa7\x0e\x76\xc2\x44\xc3\x01\xff\x10\x9b\x17\xd7\x7c\xcd\xc6\x59\x39\x04\xcc\x8e\xa7\xf1\xf9\xf8\xc3\xf1\x71\x1c\x96\xdc\xf0\xd0\xb6\x68\xc2\xf8\x83\x08\xb4\x46\x03\x35\xb9\x57\x32\x2c\xfd\xc2\x11\x41\x6a\x85\x26\xf8\x51\x9e\x6d\x31\x72\xf6\x23\xf1\xfb\xe9\xdb\xf8\xf5\x13\xe7\xf8\x59\x69\xe4\xe9\xe1\xb9\x67\xfc\xac\x2b\xd1\x05\x55\x0f\x52\x8c\x25\xc9\xc0\x59\xc9\xa7\xaf\xb1\x38\x2b\xa7\x7c\xfa\x7f\x74\xd6\xd8\x0f\x32\x6b\xec\xff\xad\xc2\xd6\xd8\x9e\xe7\x25\xf2\x2d\x75\xba\x1a\xff\x58\xb1\x57\x2f\xe8\xff\xd7\x6a\xaa\x1a\x3a\x3f\xe6\xe6\x6d\x7f\xdb\xa0\x41\x27\x78\x4f\x97\xcb\xf9\xcb\x72\x98\xcc\x75\x0d\xe1\x45\x3e\xe5\x79\xa4\x86\x64\xbb\x16\xcd\xd3\x0d\xd8\xf2\x2c\xa4\xc2\xb0\x80\x5a\xad\x51\xc7\x1f\x6a\x70\x18\x2d\x82\x77\x67\xcb\x43\xcb\xea\x63\x81\xca\xfa\xd9\xc9\xe9\xfb\xd8\xd9\x93\xbf\x03\x00\x00\xff\xff\x7a\x58\x58\xca\x75\x06\x00\x00")

func sampleObxConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleObxConf,
		"sample-obx.conf",
	)
}

func sampleObxConf() (*asset, error) {
	bytes, err := sampleObxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-obx.conf", size: 1653, mode: os.FileMode(436), modTime: time.Unix(1644348681, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-obx.conf": sampleObxConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-obx.conf": &bintree{sampleObxConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
